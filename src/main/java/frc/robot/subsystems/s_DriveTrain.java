// RobotBuilder Version: 3.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package frc.robot.subsystems;


import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.PWMVictorSPX;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj.GenericHID.RumbleType;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class s_DriveTrain extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private PWMVictorSPX left1;
private PWMVictorSPX left2;
private SpeedControllerGroup leftController;
private PWMVictorSPX right1;
private PWMVictorSPX right2;
private SpeedControllerGroup rightController;
private DifferentialDrive differentialDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    /**
    *
    */
    public s_DriveTrain() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
left1 = new PWMVictorSPX(0);
 addChild("left1",left1);
 left1.setInverted(false);

left2 = new PWMVictorSPX(1);
 addChild("left2",left2);
 left2.setInverted(false);

leftController = new SpeedControllerGroup(left1, left2  );
 addChild("leftController",leftController);
 

right1 = new PWMVictorSPX(2);
 addChild("right1",right1);
 right1.setInverted(false);

right2 = new PWMVictorSPX(3);
 addChild("right2",right2);
 right2.setInverted(false);

rightController = new SpeedControllerGroup(right1, right2  );
 addChild("rightController",rightController);
 

differentialDrive = new DifferentialDrive(leftController, rightController);
 addChild("DifferentialDrive",differentialDrive);
 differentialDrive.setSafetyEnabled(true);
differentialDrive.setExpiration(0.1);
differentialDrive.setMaxOutput(1.0);



        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void drive(double left, double right){

        differentialDrive.arcadeDrive(left, right);
    }

    public void drive(double left, double right, XboxController xbox) {
        boolean buttonOff = true;
        differentialDrive.arcadeDrive(left, right);
        if(xbox.getRawButton(1)){
                xbox.setRumble(RumbleType.kLeftRumble, 1);
                xbox.setRumble(RumbleType.kRightRumble, 1);
                buttonOff = !buttonOff;
        }
         if (xbox.getRawButton(2)){
                xbox.setRumble(RumbleType.kLeftRumble, 0);
                xbox.setRumble(RumbleType.kRightRumble, 0);
                buttonOff = !buttonOff;
            }
        
        
        // differentialDrive.arcadeDrive(left, -1.0 * right);
    }

}

